unit fCategories;{$mode objfpc}{$H+}interfaceuses  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, StdCtrls,  Grids, ExtCtrls, fCategory,  trl_irttibroker, trl_ifactory, trl_ipersist,  tal_iedit, tvl_ibindings;type  { TCategoriesForm }  TCategoriesForm = class(TForm, IListData)    btnAdd: TButton;    btnDelete: TButton;    btnEdit: TButton;    lbCategories: TListBox;    pnRunEdit: TPanel;    procedure btnAddClick(Sender: TObject);    procedure btnDeleteClick(Sender: TObject);    procedure btnEditClick(Sender: TObject);  private    fFactory: IPersistFactory;    fStore: IPersistStore;    fBinder: IRBTallyBinder;    fEdit: IEditData;  protected    procedure Actualize;    procedure List;  published    property Factory: IPersistFactory read fFactory write fFactory;    property Store: IPersistStore read fStore write fStore;    property Binder: IRBTallyBinder read fBinder write fBinder;    property Edit: IEditData read fEdit write fEdit;  end;implementation{$R *.lfm}{ TCategoriesForm }procedure TCategoriesForm.btnAddClick(Sender: TObject);var  mData: IRBData;begin  mData := Factory.CreateObject('TCategory');  if Edit.Edit(mData) then  begin    Store.Save(mData);    Store.Flush;    Actualize;  end;end;procedure TCategoriesForm.btnDeleteClick(Sender: TObject);begin  Store.Delete(Binder.CurrentData);  Store.Flush;  Actualize;end;procedure TCategoriesForm.btnEditClick(Sender: TObject);var  mData, mNewData: IRBData;begin  mData := Binder.CurrentData;  if mData = nil then    Exit;  mNewData := Factory.CreateObject(mData.ClassName);  mNewData.Assign(mData);  if Edit.Edit(mNewData) then  begin    mData.Assign(mNewData);    Store.Save(mData);    Store.Flush;    Actualize;  end;end;procedure TCategoriesForm.Actualize;begin  Binder.Reload;end;procedure TCategoriesForm.List;begin  Binder.Bind(lbCategories, 'TCategory');  try    Actualize;    ShowModal;  finally    Binder.Unbind;  end;end;end.